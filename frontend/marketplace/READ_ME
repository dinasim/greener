# Greener App Marketplace - Implementation Guide

## Overview

This guide covers the implementation steps needed to integrate the Marketplace feature into the Greener app. The Marketplace is a feature that allows users to browse, filter, and view plant-related products with support for geolocation, filtering, and messaging between users.

## Directory Structure

The marketplace feature follows this directory structure:

```
marketplace/
├── components/           # Reusable UI elements
│   ├── PlantCard.js      # Card component for displaying plants
│   ├── SearchBar.js      # Search input component
│   ├── CategoryFilter.js # Filter for plant categories
│   └── PriceRange.js     # Price range filter component
│
├── screens/              # Page views
│   ├── MarketplaceScreen.js    # Main marketplace listing screen
│   ├── PlantDetailScreen.js    # Product details screen
│   ├── AddPlantScreen.js       # Form to add new plants
│   ├── ProfileScreen.js        # User profile screen
│   ├── EditProfileScreen.js    # Edit user profile screen
│   └── MessagesScreen.js       # Messaging interface
│
├── services/             # API/data handling
│   ├── productData.js    # Plant-related API functions
│   ├── userData.js       # User-related API functions
│   └── messagesData.js   # Messaging-related API functions
│
├── marketplaceNavigation/  # Stack navigation for Marketplace
│   └── index.js            # Main navigation setup
│
└── index.js              # Main entry point for marketplace module
```

## Installation Steps

1. Copy the marketplace folder into your project's root directory.

2. Install required dependencies:

```bash
npm install @react-navigation/native-stack react-native-maps @react-native-community/slider expo-image-picker expo-file-system
```

For Expo projects:
```bash
expo install react-native-maps @react-native-community/slider expo-image-picker expo-file-system
```

3. Configure Google Sign-In for authentication:

If not already done, add Google Sign-In to your application:
```bash
expo install expo-auth-session expo-random expo-web-browser
```

4. Add the following to your app.json for Expo projects:

```json
{
  "expo": {
    "plugins": [
      [
        "expo-image-picker",
        {
          "photosPermission": "The app accesses your photos to let you share them with your friends.",
          "cameraPermission": "The app accesses your camera to let you take photos to share with your friends."
        }
      ]
    ]
  }
}
```

## Integration Steps

1. Import the MarketplaceNavigation in your main navigation file:

```javascript
import { MarketplaceNavigation } from './marketplace';
```

2. Add the MarketplaceNavigation to your main navigation structure:

```javascript
<Stack.Screen 
  name="Marketplace" 
  component={MarketplaceNavigation}
  options={{
    headerShown: false // Hide header since MarketplaceNavigation has its own
  }}
/>
```

3. Add a button on your Home screen to navigate to the Marketplace:

```javascript
import { TouchableOpacity, Text } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function HomeScreen() {
  const navigation = useNavigation();
  
  return (
    <View>
      {/* Your existing Home screen content */}
      
      <TouchableOpacity
        onPress={() => navigation.navigate('Marketplace')}
        style={{
          backgroundColor: '#4CAF50',
          padding: 15,
          borderRadius: 8,
          alignItems: 'center',
          margin: 20,
        }}
      >
        <Text style={{ color: 'white', fontWeight: 'bold' }}>Go to Marketplace</Text>
      </TouchableOpacity>
    </View>
  );
}
```

4. Set up Google Authentication token globally:

After successful login with Google, store the token globally:

```javascript
// After successful Google Sign-In
global.googleAuthToken = googleUser.authentication.accessToken;
```

## Azure Functions Integration

The marketplace uses these Azure Function endpoints:

1. **Products API:**
   - `GET /products` - Get all products with optional filters
   - `GET /products/{category}` - Get products by category
   - `GET /products/specific/{id}` - Get a specific product
   - `POST /products/create` - Create a new product
   - `PATCH /products/edit/{id}` - Edit a product
   - `GET /products/enable/{id}` - Activate a product
   - `GET /products/archive/{id}` - Archive a product
   - `GET /products/wish/{id}` - Toggle wishlist status
   - `GET /products/sells/active/{id}` - Get user's active sells
   - `GET /products/sells/archived` - Get user's archived sells
   - `GET /products/wishlist/getWishlist` - Get user's wishlist

2. **User API:**
   - `GET /auth/getUser` - Get current user info
   - `PATCH /user/edit-profile/{id}` - Edit user profile
   - `GET /user/getUserById/{id}` - Get another user's profile

3. **Messages API:**
   - `POST /messages/createChatRoom` - Create a new chat room
   - `GET /messages/getUserConversations` - Get user's conversations
   - `POST /messages/sendMessage` - Send a message

To set up the Azure Functions, follow these steps:

1. Create a new Azure Functions project in the Azure portal.
2. Create function endpoints for each of the required API routes.
3. Configure CORS to allow requests from your app's domain.
4. Set up authentication to validate Google tokens.
5. Connect the functions to Azure Cosmos DB.

## Map Integration

The marketplace includes a map view for geographical product search:

1. Ensure you've installed `react-native-maps`:
   ```bash
   expo install react-native-maps
   ```

2. For the full map functionality with Azure Maps, add the Azure Maps API key to your environment variables:
   ```javascript
   const AZURE_MAPS_KEY = process.env.AZURE_MAPS_KEY;
   ```

3. Replace the mock geocoding in MarketplaceScreen.js with actual Azure Maps geocoding calls.

## Testing

Before deploying, test the marketplace feature:

1. Test authentication flow
2. Test product listing and filtering
3. Test map view
4. Test creating and editing listings
5. Test messaging between users
6. Test wishlist functionality

## Troubleshooting

Common issues and solutions:

- **Authentication Errors**: Ensure Google Sign-In is properly configured and tokens are correctly passed to Azure Functions.
- **Image Upload Issues**: Check that file handling permissions are properly set in app.json and the base64 conversion is working.
- **Map Not Displaying**: Verify react-native-maps installation and setup, especially for Android which requires additional configuration.
- **API Connection Errors**: Confirm API URLs are correct and CORS is properly configured on Azure Functions.

## Resources

- [React Native Documentation](https://reactnative.dev/docs/getting-started)
- [Expo Documentation](https://docs.expo.dev/)
- [Azure Functions Documentation](https://docs.microsoft.com/en-us/azure/azure-functions/)
- [Azure Cosmos DB Documentation](https://docs.microsoft.com/en-us/azure/cosmos-db/)
- [React Navigation Documentation](https://reactnavigation.org/docs/